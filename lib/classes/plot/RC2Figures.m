classdef RC2Figures < handle
% RC2Figures Class for handling common operations for figures.
%
%   RC2Figures Properties:
%       save_on         - true or false (default), whether to save anything
%                         upon call to `save_fig_to_join` or `save_fig`
%       curr_dir        - directory in which we will save .pdfs and figures
%                         upon call to `save_fig_to_join` or `save_fig`
%
%       Private:
%       ctl             - instance of RC2Analysis/RC2Formatter/RC2Preprocess
%       n_figs_to_join  - internal use
%       fnames_to_join  - internal use
%
%  RC2Figures Methods:
%       a4figure            - create an A4 figure
%       a3figure            - unused
%       set_figure_subdir   - set `curr_dir` to a subdirectory of `path_config.figure_dir`
%       save_fig_to_join    - temporarily save a figure to join later
%       join_figs           - join all temporarily saved figures
%       save_fig            - save a single figure
%       clear_figs          - clear all open figures

    properties
        
        save_on = false
        curr_dir
    end
    
    properties (SetAccess = private)
        
        ctl
        
        n_figs_to_join = 0
        fnames_to_join = {}
    end
    
    
    
    methods
        
        function obj = RC2Figures(ctl)
        %%RC2Figures
        %
        %   RC2Figures(CTL) takes in an object of class RC2Analysis,
        %   RC2Formatter or RC2Preprocess
        
            obj.ctl = ctl;
        end
        
        
        
        function h_fig = a4figure(obj, orientation)
        %%a4figure Create an A4 figure
        %
        %   a4figure(ORIENATION) creates an A4 figure for plotting.
        %   ORIENTATION is either 'portrait' or 'landscape'.
        
            VariableDefault('orientation', 'portrait');
            h_fig = a4figure(orientation);
        end
        
        
        
        function h_fig = a3figure(obj, orientation)
        %%do not use
            VariableDefault('orientation', 'portrait');
            h_fig = a3figure(orientation);
        end
        
        
        
        function set_figure_subdir(obj, varargin)
        %%set_figure_subdir set `curr_dir` to a subdirectory of `path_config.figure_dir`
        %
        %   set_figure_subdir(VARARGIN) Sets `curr_dir` to a subdirectory of the top
        %   level `path_config.figure_dir`, and sets where to save figures
        %   VARARGIN is a sequence of arguments of form STRING1, STRING2,
        %   ...
        %
        %   e.g. if `path_config.figure_dir` is /figure/path/ then
        %   set_figure_subdir('one', 'two', 'three') would in future save
        %   figures to /figure/path/one/two/three
        
            assert(all(cellfun(@ischar, varargin)), ...
                'Not all arguments are character strings');
            
            save_dir = obj.ctl.path_config.figure_dir;
            for i = 1 : length(varargin)
                save_dir = fullfile(save_dir, varargin{i});
            end
            
            obj.curr_dir = save_dir;
            
            if obj.save_on && ~isfolder(obj.curr_dir)
                mkdir(obj.curr_dir)
            end
        end
        
        
        
        function save_fig_to_join(obj, use_opengl, dpi)
        %%save_fig_to_join  Temporarily save a figure to join later 
        %
        %   save_fig_to_join(USE_OPENGL, DPI) saves the current figure to a
        %   temporary .pdf file. The filename is stored for later use of
        %   `join_figs` which will join the .pdfs together.
        %
        %   USE_OPENGL whether to pass -opengl flag to `print` function
        %   DPI fi using OPENGL the dots per inch to save the pdf as
        
            VariableDefault('use_opengl', false);
            VariableDefault('dpi', 300);
            
            if obj.save_on
                obj.n_figs_to_join = obj.n_figs_to_join + 1;
                fname = sprintf('fig_%03i.pdf', obj.n_figs_to_join);
                
                obj.fnames_to_join{obj.n_figs_to_join} = fullfile(obj.curr_dir, fname);
                if use_opengl
                    print(obj.fnames_to_join{obj.n_figs_to_join}, '-dpdf', '-opengl', sprintf('-r%i', dpi));
                else
                    print(obj.fnames_to_join{obj.n_figs_to_join}, '-bestfit', '-dpdf', '-painters');
                end
            end
        end
        
        
        
        function join_figs(obj, fname, overwrite)
        %%join_figs  Join all temporarily saved figures
        %
        %   join_figs(FILENAME, OVERWRITE) takes the .pdfs generated by
        %   `save_figs_to_join`, and joins them.
        %
        %   FILENAME - the full filename of the joined .pdf
        %   OVERWRITE - true or false (default), whether to overwrite an
        %               existing file with the same filename
        %
        %  After the figures have been joined, the temporary files will be
        %  deleted.
        %
        %   `fnames_to_join` and `n_figs_to_join` will also be reset to an
        %   empty array and 0 respectively.
        
            VariableDefault('overwrite', false);
            
            if obj.save_on
                fname = fullfile(obj.curr_dir, fname);
                join_pdfs(obj.fnames_to_join, fname, true, overwrite);
            end
            
            obj.clear_figs();
        end
        
        
        
        function save_fig(obj, fname, overwrite, use_opengl, dpi)
        %%save_fig Save a single figure
        %
        %   save_fig(FILENAME, OVERWRITE, USE_OPENGL, DPI)
        %   saves the current open figure as a .pdf
        %
        %   Args:
        %       FILENAME - the full filename of the .pdf
        %       OVERWRITE - true or false (default), whether to overwrite an
        %                   existing file with the same filename      
        %       USE_OPENGL - whether to pass -opengl flag to `print` function
        %       DPI - if using OPENGL the dots per inch to save the pdf as
        
            VariableDefault('overwrite', false);
            VariableDefault('use_opengl', false);
            VariableDefault('dpi', 300);
            
            if obj.save_on
                fname = fullfile(obj.curr_dir, fname);
                
                if isfile(fname) && overwrite == false
                    return
                end
                
                if use_opengl
                    print(fname, '-dpdf', '-opengl', sprintf('-r%i', dpi));
                else
                    print(fname, '-dpdf', '-painters');
                end
            end
        end
        
        
        
        function clear_figs(obj)
        %%clear_figs Reset counters for temporary figures and close all
        %%open figs.
        
            obj.n_figs_to_join = 0;
            obj.fnames_to_join = {};
            close all
        end
    end
end
